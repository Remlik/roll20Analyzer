var customcharsheet_html = "";
var customcharsheet_css = "";
var customcharsheet_translation = "eyJ2YWx1ZXMiOnsibnBjLW9wdGlvbnMtdSI6Ik5QQyBPUFRJT05TIiwibmFtZS11IjoiTkFNRSIsIm5wYy10eXBlLXUiOiJOUEMgVFlQRSIsIm5wYy10eXBlLXBsYWNlIjoiTWVkaXVtIGZpZW5kLCBhbnkgZXZpbCBhbGlnbm1lbnQiLCJhcm1vci1jbGFzcy11IjoiQVJNT1IgQ0xBU1MiLCJ0eXBlLXUiOiJUWVBFIiwibnBjLWFybW9yLXBsYWNlIjoic2NhbGUgbWFpbCIsImhpdC1wb2ludHMtdSI6IkhJVCBQT0lOVFMiLCJmb3JtdWxhLXUiOiJGT1JNVUxBIiwic3BlZWQtdSI6IlNQRUVEIiwibnBjLXNwZWVkLXBsYWNlIjoiMzAgZnQuLCBmbHkgNjBmdC4iLCJhdHRyaWJ1dGVzLXUiOiJBVFRSSUJVVEVTIiwic3RyLXUiOiJTVFIiLCJkZXgtdSI6IkRFWCIsImNvbi11IjoiQ09OIiwiaW50LXUiOiJJTlQiLCJ3aXMtdSI6IldJUyIsImNoYS11IjoiQ0hBIiwic2F2ZXMtdSI6IlNBVkVTIiwic2tpbGxzLXUiOiJTS0lMTFMiLCJhY3JvYmF0aWNzLXUiOiJBQ1JPQkFUSUNTIiwiYW5pbWFsLWhhbmRsaW5nLXUiOiJBTklNQUwgSEFORExJTkciLCJhcmNhbmEtdSI6IkFSQ0FOQSIsImF0aGxldGljcy11IjoiQVRITEVUSUNTIiwiZGVjZXB0aW9uLXUiOiJERUNFUFRJT04iLCJoaXN0b3J5LXUiOiJISVNUT1JZIiwiaW5zaWdodC11IjoiSU5TSUdIVCIsImludGltaWRhdGlvbi11IjoiSU5USU1JREFUSU9OIiwiaW52ZXN0aWdhdGlvbi11IjoiSU5WRVNUSUdBVElPTiIsIm1lZGljaW5lLXUiOiJNRURJQ0lORSIsIm5hdHVyZS11IjoiTkFUVVJFIiwicGVyY2VwdGlvbi11IjoiUEVSQ0VQVElPTiIsInBlcmZvcm1hbmNlLXUiOiJQRVJGT1JNQU5DRSIsInBlcnN1YXNpb24tdSI6IlBFUlNVQVNJT04iLCJyZWxpZ2lvbi11IjoiUkVMSUdJT04iLCJzbGVpZ2h0LW9mLWhhbmQtdSI6IlNMRUlHSFQgT0YgSEFORCIsInN0ZWFsdGgtdSI6IlNURUFMVEgiLCJzdXJ2aXZhbC11IjoiU1VSVklWQUwiLCJkYW1hZ2UtdnVsbi11IjoiREFNQUdFIFZVTE5FUkFCSUxJVElFUyIsIm5wYy1kbWctdnVsbi1wbGFjZSI6ImZpcmUiLCJkYW1hZ2UtcmVzLXUiOiJEQU1BR0UgUkVTSVNUQU5DRVMiLCJucGMtZG1nLXJlcy1wbGFjZSI6ImNvbGQiLCJkYW1hZ2UtaW1tLXUiOiJEQU1BR0UgSU1NVU5JVElFUyIsIm5wYy1kbWctaW1tLXBsYWNlIjoibGlnaHRpbmcsIHRodW5kZXIiLCJjb25kLWltbS11IjoiQ09ORElUSU9OIElNTVVOSVRJRVMiLCJucGMtY29uZC1pbW0tcGxhY2UiOiJjaGFybWVkIiwic2Vuc2VzLXUiOiJTRU5TRVMiLCJucGMtc2Vuc2VzLXBsYWNlIjoiZGFya3Zpc2lvbiAxMjBmdC4sIHBhc3NpdmUgUGVyY2VwdGlvbiAxNiIsImxhbmdzLXUiOiJMQU5HVUFHRVMiLCJucGMtbGFuZ3MtcGxhY2UiOiJBYnlzc2FsLCBDb21tb24sIEluZmVybmFsIiwiY2hhbGxlbmdlLXUiOiJDSEFMTEVOR0UiLCJ4cC11IjoiWFAiLCJzcGVsbGNhc3QtbnBjLXUiOiJTUEVMTENBU1RJTkcgTlBDIiwic3BlbGwtYWJpbGl0eS11IjoiU1BFTExDQVNUSU5HIEFCSUxJVFkiLCJub25lLXUiOiJOT05FIiwic3RyZW5ndGgtdSI6IlNUUkVOR1RIIiwic3RyZW5ndGgtc2F2ZS11IjoiU1RSRU5HVEggU0FWRSIsImRleHRlcml0eS11IjoiREVYVEVSSVRZIiwiZGV4dGVyaXR5LXNhdmUtdSI6IkRFWFRFUklUWSBTQVZFIiwiY29uc3RpdHV0aW9uLXUiOiJDT05TVElUVVRJT04iLCJjb25zdGl0dXRpb24tc2F2ZS11IjoiQ09OU1RJVFVUSU9OIFNBVkUiLCJpbnRlbGxpZ2VuY2UtdSI6IklOVEVMTElHRU5DRSIsImludGVsbGlnZW5jZS1zYXZlLXUiOiJJTlRFTExJR0VOQ0UgU0FWRSIsIndpc2RvbS11IjoiV0lTRE9NIiwid2lzZG9tLXNhdmUtdSI6IldJU0RPTSBTQVZFIiwiY2hhcmlzbWEtdSI6IkNIQVJJU01BIiwiY2hhcmlzbWEtc2F2ZS11IjoiQ0hBUklTTUEgU0FWRSIsInNwZWxsLWRjLXUiOiJTUEVMTCBEQyIsInNwZWxsLWF0ay1ib251cy11IjoiU1BFTEwgQVRUQUNLIEJPTlVTIiwiaGFzLXJlYWN0aW9uLXUiOiJIQVMgUkVBQ1RJT05TIiwibGVnLWFjdGlvbnM6LXUiOiJMRUdFTkRBUlkgQUNUSU9OUzoiLCJnZW4tb3B0cy11IjoiR0VORVJBTCBPUFRJT05TIiwibnBjLXUiOiJOUEMiLCJyb2xsLXF1ZXJpZXM6LXUiOiJST0xMIFFVRVJJRVM6IiwiYWx3YXlzLWFkdiI6IkFsd2F5cyBSb2xsIEFkdmFudGFnZSIsImFkdi10b2dnbGUiOiJBZHZhbnRhZ2UgVG9nZ2xlIiwicXVlcnktYWR2IjoiUXVlcnkgQWR2YW50YWdlIiwibmV2ZXItYWR2IjoiTmV2ZXIgUm9sbCBBZHZhbnRhZ2UiLCJ3aGlzcC1yb2xscy1nbTotdSI6IldISVNQRVIgUk9MTFMgVE8gR006IiwibmV2ZXItd2hpc3AiOiJOZXZlciBXaGlzcGVyIFJvbGxzIiwicXVlcnktd2hpc3AiOiJRdWVyeSBXaGlzcGVyIiwiYWx3YXlzLXdoaXNwIjoiQWx3YXlzIFdoaXNwZXIgUm9sbHMiLCJhdXRvLWRtZy1yb2xsOi11IjoiQVVUTyBEQU1BR0UgUk9MTDoiLCJuZXZlci1kbWciOiJEb24ndCBBdXRvIFJvbGwgRGFtYWdlIiwiYWx3YXlzLWRtZyI6IkF1dG8gUm9sbCBEYW1hZ2UgJmFtcDsgQ3JpdCIsImFjIjoiQXJtb3IgQ2xhc3MiLCJocCI6IkhpdCBQb2ludHMiLCJzcGVlZCI6IlNwZWVkIiwic2F2aW5nLXRocm93IjoiU2F2aW5nIFRocm93cyIsInN0cisiOiJTdHIgKyIsImRleCsiOiJEZXggKyIsImNvbisiOiJDb24gKyIsImludCsiOiJJbnQgKyIsIndpcysiOiJXaXMgKyIsImNoYSsiOiJDaGEgKyIsInNraWxscyI6IlNraWxscyIsImFjcm9iYXRpY3MrIjoiQWNyb2JhdGljcyArIiwiYW5pbWFsLWhhbmRsaW5nKyI6IkFuaW1hbCBIYW5kbGluZyArIiwiYXJjYW5hKyI6IkFyY2FuYSArIiwiYXRobGV0aWNzKyI6IkF0aGxldGljcyArIiwiZGVjZXB0aW9uKyI6IkRlY2VwdGlvbiArIiwiaGlzdG9yeSsiOiJIaXN0b3J5ICsiLCJpbnNpZ2h0KyI6Ikluc2lnaHQgKyIsImludGltaWRhdGlvbisiOiJJbnRpbWlkYXRpb24gKyIsImludmVzdGlnYXRpb24rIjoiSW52ZXN0aWdhdGlvbiArIiwibWVkaWNpbmUrIjoiTWVkaWNpbmUgKyIsIm5hdHVyZSsiOiJOYXR1cmUgKyIsInBlcmNlcHRpb24rIjoiUGVyY2VwdGlvbiArIiwicGVyZm9ybWFuY2UrIjoiUGVyZm9ybWFuY2UgKyIsInBlcnN1YXNpb24rIjoiUGVyc3Vhc2lvbiArIiwicmVsaWdpb24rIjoiUmVsaWdpb24gKyIsInNsZWlnaHQtb2YtaGFuZCsiOiJTbGVpZ2h0IG9mIEhhbmQgKyIsInN0ZWFsdGgrIjoiU3RlYWx0aCArIiwic3Vydml2YWwrIjoiU3Vydml2YWwgKyIsImFjcm9iYXRpY3MiOiJBY3JvYmF0aWNzIiwiYW5pbWFsLWhhbmRsaW5nIjoiQW5pbWFsIEhhbmRsaW5nIiwiYXJjYW5hIjoiQXJjYW5hIiwiYXRobGV0aWNzIjoiQXRobGV0aWNzIiwiZGVjZXB0aW9uIjoiRGVjZXB0aW9uIiwiaGlzdG9yeSI6Ikhpc3RvcnkiLCJpbnNpZ2h0IjoiSW5zaWdodCIsImludGltaWRhdGlvbiI6IkludGltaWRhdGlvbiIsImludmVzdGlnYXRpb24iOiJJbnZlc3RpZ2F0aW9uIiwibWVkaWNpbmUiOiJNZWRpY2luZSIsIm5hdHVyZSI6Ik5hdHVyZSIsInBlcmNlcHRpb24iOiJQZXJjZXB0aW9uIiwicGVyZm9ybWFuY2UiOiJQZXJmb3JtYW5jZSIsInBlcnN1YXNpb24iOiJQZXJzdWFzaW9uIiwicmVsaWdpb24iOiJSZWxpZ2lvbiIsInNsZWlnaHQtb2YtaGFuZCI6IlNsZWlnaHQgb2YgSGFuZCIsInN0ZWFsdGgiOiJTdGVhbHRoIiwic3Vydml2YWwiOiJTdXJ2aXZhbCIsImRtZy12dWxuIjoiRGFtYWdlIFZ1bG5lcmFiaWxpdGllcyIsImRtZy1yZXMiOiJEYW1hZ2UgUmVzaXN0YW5jZXMiLCJkbWctaW1tIjoiRGFtYWdlIEltbXVuaXRpZXMiLCJjb25kLWltbSI6IkNvbmRpdGlvbiBJbW11bml0aWVzIiwic2Vuc2VzIjoiU2Vuc2VzIiwibGFuZ3MiOiJMYW5ndWFnZXMiLCJjaGFsbGVuZ2UiOiJDaGFsbGVuZ2UiLCJucGMtdHJhaXQtbmFtZS1wbGFjZSI6IkZhbHNlIEFwcGVhcmFuY2UuIiwibnBjLXRyYWl0LWRlc2MtcGxhY2UiOiJJZiB0aGUgZHJhZ29uIGZhaWxzLi4uIiwiYWN0aW9ucyI6IkFjdGlvbnMiLCJhZHYiOiJBZHZhbnRhZ2UiLCJub3JtIjoiTm9ybWFsIiwiZGlzYWR2IjoiRGlzYWR2YW50YWdlIiwibmFtZTotdSI6Ik5BTUU6IiwiYXR0YWNrLXUiOiJBVFRBQ0siLCJ0eXBlOi11IjoiVFlQRToiLCJtZWxlZSI6Ik1lbGVlIiwicmFuZ2VkIjoiUmFuZ2VkIiwicmFuZ2UtcmVhY2g6LXUiOiJSQU5HRS9SRUFDSDoiLCJyYW5nZS1yZWFjaC1wbGFjZSI6IjUgZnQuIiwidG8taGl0Oi11IjoiVE8gSElUOiIsInRhcmdldDotdSI6IlRBUkdFVDoiLCJ0YXJnZXQ6IjoiVGFyZ2V0OiIsInRvLWhpdC1wbGFjZSI6Ik9uZSB0YXJnZXQiLCJvbi1oaXQ6LXUiOiJPTiBISVQ6Iiwib24taGl0LXBsYWNlIjoic2xhc2hpbmciLCJvbi1oaXQyOi11IjoiT04gSElUIDI6Iiwib24taGl0LTItcGxhY2UiOiJmaXJlIiwiaGl0OiI6IkhpdDogIiwicmVhY3Rpb25zIjoiUmVhY3Rpb25zIiwibnBjLXJlcGVhdGluZy1uYW1lLXBsYWNlIjoiUGFycnkuIiwibnBjLXJlcGVhdGluZy1kZXNjLXBsYWNlIjoiVGhlIGNyZWF0dXJlIGFkZHMgMiB0byBpdHMgQUMgYWdhaW5zdC4uLiIsInNwZWxscyI6IlNwZWxscyIsInByZXAtdSI6IlBSRVAiLCJzY2hvb2w6LXUiOiJTQ0hPT0w6IiwiYWJqdXJhdGlvbiI6IkFianVyYXRpb24iLCJjb25qdXJhdGlvbiI6IkNvbmp1cmF0aW9uIiwiZGl2aW5hdGlvbiI6IkRpdmluYXRpb24iLCJlbmNoYW50bWVudCI6IkVuY2hhbnRtZW50IiwiZXZvY2F0aW9uIjoiRXZvY2F0aW9uIiwiaWxsdXNpb24iOiJJbGx1c2lvbiIsIm5lY3JvbWFuY3kiOiJOZWNyb21hbmN5IiwidHJhbnNtdXRhdGlvbiI6IlRyYW5zbXV0YXRpb24iLCJyaXR1YWwiOiJSSVRVQUwiLCJyaXR1YWwtbCI6InJpdHVhbCIsInJhbmdlOi11IjoiUkFOR0U6IiwicmFuZ2U6IjoiUmFuZ2U6IiwiY29tcG9uZW50czotdSI6IkNPTVBPTkVOVFM6IiwiY29tcG9uZW50czoiOiJDb21wb25lbnRzOiIsInNwZWxsLWNvbXBvbmVudC12ZXJiYWwiOiJWIiwic3BlbGwtY29tcG9uZW50LXNvbWF0aWMiOiJTIiwic3BlbGwtY29tcG9uZW50LW1hdGVyaWFsIjoiTSIsInJ1YnktZHVzdC1wbGFjZSI6InJ1YnkgZHVzdCB3b3J0aCA1MGdwIiwiY29uY2VudHJhdGlvbi11IjoiQ09OQ0VOVFJBVElPTiIsImNvbmNlbnRyYXRpb24iOiJDb25jZW50cmF0aW9uIiwiZHVyYXRpb246LXUiOiJEVVJBVElPTjoiLCJkdXJhdGlvbjoiOiJEdXJhdGlvbjoiLCJkaWZmaWN1bHR5LWNsYXNzLWFidiI6IkRDIiwib3V0cHV0Oi11IjoiT1VUUFVUOiIsInNwZWxsY2FyZC11IjoiU1BFTExDQVJEIiwic3BlbGwtYXRrOi11IjoiU1BFTEwgQVRUQUNLOiIsIm5vbmUiOiJOb25lIiwiZG1nOi11IjoiREFNQUdFOiIsImRtZzI6LXUiOiJEQU1BR0UyOiIsImhlYWxpbmc6LXUiOiJIRUFMSU5HOiIsImFkZC1hYmlsaXR5LW1vZC11IjoiQUREIEFCSUxJVFkgTU9EIFRPIERBTUFHRSBPUiBIRUFMSU5HIiwiZWZmZWN0Oi11IjoiRUZGRUNUOiIsIm5wYy1hdGstZWZmZWN0LXBsYWNlIjoiSGFsZiBkYW1hZ2UiLCJkZXNjOi11IjoiREVTQ1JJUFRJT046IiwiYXQtaGlnaGVyLWx2bDotdSI6IkFUIEhJR0hFUiBMRVZFTFM6IiwiYXQtaGlnaGVyLWx2bCI6IkF0IEhpZ2hlciBMZXZlbHMiLCJoaWdoZXItbHZsLWNhc3QiOiJIaWdoZXIgTGV2ZWwgQ2FzdCIsImxlZy1hY3Rpb25zIjoiTGVnZW5kYXJ5IEFjdGlvbnMiLCJsZWctYWN0aW9ucy1kZXNjIjoiVGhlIDxzcGFuIG5hbWU9XCJhdHRyX25wY19uYW1lXCI+PC9zcGFuPiBjYW4gdGFrZSA8c3BhbiBuYW1lPVwiYXR0cl9ucGNfbGVnZW5kYXJ5X2FjdGlvbnNcIj48L3NwYW4+IGxlZ2VuZGFyeSBhY3Rpb25zLCBjaG9vc2luZyBmcm9tIHRoZSBvcHRpb25zIGJlbG93LiBPbmx5IG9uZSBsZWdlbmRhcnkgb3B0aW9uIGNhbiBiZSB1c2VkIGF0IGEgdGltZSBhbmQgb25seSBhdCB0aGUgZW5kIG9mIGFub3RoZXIgY3JlYXR1cmUncyB0dXJuLiBUaGUgPHNwYW4gbmFtZT1cImF0dHJfbnBjX25hbWVcIj48L3NwYW4+IHJlZ2FpbnMgc3BlbnQgbGVnZW5kYXJ5IGFjdGlvbnMgYXQgdGhlIHN0YXJ0IG9mIGl0cyB0dXJuLiIsImF0ay1yYW5nZS1wbGFjZSI6IjUgZnQuIiwiYXRrLXRhcmdldC1wbGFjZSI6Ik9uZSB0YXJnZXQiLCJhdGstZG1nLXR5cGUtcGxhY2UiOiJzbGFzaGluZyIsImF0ay1kbWctdHlwZTItcGxhY2UiOiJmaXJlIiwiYWR2LXUiOiJBRFZBTlRBR0UiLCJub3JtLXUiOiJOT1JNQUwiLCJkaXNhZHYtdSI6IkRJU0FEVkFOVEFHRSIsImNvcmUtdSI6IkNPUkUiLCJiaW8tdSI6IkJJTyIsInNwZWxscy11IjoiU1BFTExTIiwiY2hhci1uYW1lLXUiOiJDSEFSQUNURVIgTkFNRSIsImJhcmJhcmlhbiI6IkJhcmJhcmlhbiIsImJhcmQiOiJCYXJkIiwiY2xlcmljIjoiQ2xlcmljIiwiZHJ1aWQiOiJEcnVpZCIsImZpZ2h0ZXIiOiJGaWdodGVyIiwibW9uayI6Ik1vbmsiLCJwYWxhZGluIjoiUGFsYWRpbiIsInJhbmdlciI6IlJhbmdlciIsInJvZ3VlIjoiUm9ndWUiLCJzb3JjZXJlciI6IlNvcmNlcmVyIiwid2FybG9jayI6IldhcmxvY2siLCJ3aXphcmQiOiJXaXphcmQiLCJjbGFzcy1sZXZlbC11IjoiQ0xBU1MgJmFtcDsgTEVWRUwiLCJiYWNrZ3JvdW5kLXUiOiJCQUNLR1JPVU5EIiwicmFjZS11IjoiUkFDRSIsImFsaWdubWVudC11IjoiQUxJR05NRU5UIiwiZXhwLXB0cy11IjoiRVhQRVJJRU5DRSBQT0lOVFMiLCJpbnNwaXJhdGlvbi11IjoiSU5TUElSQVRJT04iLCJwcm9mLWJvbnVzLXUiOiJQUk9GSUNJRU5DWSBCT05VUyIsInN0cmVuZ3RoIjoiU3RyZW5ndGgiLCJzdHJlbmd0aC1zYXZlIjoiU3RyZW5ndGggU2F2ZSIsImRleHRlcml0eSI6IkRleHRlcml0eSIsImRleHRlcml0eS1zYXZlIjoiRGV4dGVyaXR5IFNhdmUiLCJjb25zdGl0dXRpb24iOiJDb25zdGl0dXRpb24iLCJjb25zdGl0dXRpb24tc2F2ZSI6IkNvbnN0aXR1dGlvbiBTYXZlIiwiaW50ZWxsaWdlbmNlIjoiSW50ZWxsaWdlbmNlIiwiaW50ZWxsaWdlbmNlLXNhdmUiOiJJbnRlbGxpZ2VuY2UgU2F2ZSIsIndpc2RvbSI6Ildpc2RvbSIsIndpc2RvbS1zYXZlIjoiV2lzZG9tIFNhdmUiLCJjaGFyaXNtYSI6IkNoYXJpc21hIiwiY2hhcmlzbWEtc2F2ZSI6IkNoYXJpc21hIFNhdmUiLCJzYXZpbmctdGhyb3dzLXUiOiJTQVZJTkcgVEhST1dTIiwiYWNyb2JhdGljcy1jb3JlIjoiQWNyb2JhdGljcyA8c3Bhbj4oRGV4KTwvc3Bhbj4iLCJhbmltYWwtaGFuZGxpbmctY29yZSI6IkFuaW1hbCBIYW5kbGluZyA8c3Bhbj4oV2lzKTwvc3Bhbj4iLCJhcmNhbmEtY29yZSI6IkFyY2FuYSA8c3Bhbj4oSW50KTwvc3Bhbj4iLCJhdGhsZXRpY3MtY29yZSI6IkF0aGxldGljcyA8c3Bhbj4oU3RyKTwvc3Bhbj4iLCJkZWNlcHRpb24tY29yZSI6IkRlY2VwdGlvbiA8c3Bhbj4oQ2hhKTwvc3Bhbj4iLCJoaXN0b3J5LWNvcmUiOiJIaXN0b3J5IDxzcGFuPihJbnQpPC9zcGFuPiIsImluc2lnaHQtY29yZSI6Ikluc2lnaHQgPHNwYW4+KFdpcyk8L3NwYW4+IiwiaW50aW1pZGF0aW9uLWNvcmUiOiJJbnRpbWlkYXRpb24gPHNwYW4+KENoYSk8L3NwYW4+IiwiaW52ZXN0aWdhdGlvbi1jb3JlIjoiSW52ZXN0aWdhdGlvbiA8c3Bhbj4oSW50KTwvc3Bhbj4iLCJtZWRpY2luZS1jb3JlIjoiTWVkaWNpbmUgPHNwYW4+KFdpcyk8L3NwYW4+IiwibmF0dXJlLWNvcmUiOiJOYXR1cmUgPHNwYW4+KEludCk8L3NwYW4+IiwicGVyY2VwdGlvbi1jb3JlIjoiUGVyY2VwdGlvbiA8c3Bhbj4oV2lzKTwvc3Bhbj4iLCJwZXJmb3JtYW5jZS1jb3JlIjoiUGVyZm9ybWFuY2UgPHNwYW4+KENoYSk8L3NwYW4+IiwicGVyc3Vhc2lvbi1jb3JlIjoiUGVyc3Vhc2lvbiA8c3Bhbj4oQ2hhKTwvc3Bhbj4iLCJyZWxpZ2lvbi1jb3JlIjoiUmVsaWdpb24gPHNwYW4+KEludCk8L3NwYW4+Iiwic2xlaWdodC1vZi1oYW5kLWNvcmUiOiJTbGVpZ2h0IG9mIEhhbmQgPHNwYW4+KERleCk8L3NwYW4+Iiwic3RlYWx0aC1jb3JlIjoiU3RlYWx0aCA8c3Bhbj4oRGV4KTwvc3Bhbj4iLCJzdXJ2aXZhbC1jb3JlIjoiU3Vydml2YWwgPHNwYW4+KFdpcyk8L3NwYW4+IiwicGFzcy13aXMtdSI6IlBBU1NJVkUgV0lTRE9NIChQRVJDRVBUSU9OKSIsInRvb2wtdSI6IlRPT0wiLCJwcm8tdSI6IlBSTyIsImF0dHItdSI6IkFUVFJJQlVURSIsInByb2YtYm9udXM6LXUiOiJQUk9GSUNJRU5DWSBCT05VUzoiLCJwcm9mLXUiOiJQUk9GSUNJRU5UIiwiZXhwZXJ0aXNlLXUiOiJFWFBFUlRJU0UiLCJqYWNrLW9mLWFsbC11IjoiSkFDSyBPRiBBTEwgVFJBREVTIiwiYXR0cjotdSI6IkFUVFJJQlVURToiLCJ0b29sLXByb2YtdSI6IlRPT0wgUFJPRklDSUVOQ0lFUyIsIm90aGVyLXByb2YtbGFuZ3MtdSI6Ik9USEVSIFBST0ZJQ0lFTkNJRVMgJmFtcDsgTEFOR1VBR0VTIiwiaW5pdCI6IkluaXRpYXRpdmUiLCJpbml0LXUiOiJJTklUSUFUSVZFIiwiaHAtbWF4LXUiOiJIaXQgUG9pbnQgTWF4aW11bSIsImhwLWN1cnJlbnQtdSI6IkNVUlJFTlQgSElUIFBPSU5UUyIsImhwLXRlbXAtdSI6IlRFTVBPUkFSWSBISVQgUE9JTlRTIiwidG90YWwiOiJUb3RhbCIsImhpdC1kaWNlLXUiOiJISVQgRElDRSIsInN1Y2Nlc3Nlcy11IjoiU1VDQ0VTU0VTIiwiZmFpbHVyZXMtdSI6IkZBSUxVUkVTIiwiZGVhdGgtc2F2ZS11IjoiREVBVEggU0FWRSIsImRlYXRoLXNhdmVzLXUiOiJERUFUSCBTQVZFUyIsImF0ay11IjoiQVRLIiwiZG1nLXR5cGUtdSI6IkRBTUFHRS9UWVBFIiwiYXR0YWNrOi11IjoiQVRUQUNLOiIsInByb2ZpY2llbnQtdSI6IlBST0ZJQ0lFTlQiLCJyYW5nZS1wbGFjZSI6IlNlbGYgKDYwLWZvb3QgY29uZSkiLCJtYWdpYy1ib251czotdSI6Ik1BR0lDIEJPTlVTOiIsImNyaXQtcmFuZ2UtdSI6IkNSSVQgUkFOR0U6IiwiZGFtYWdlOi11IjoiREFNQUdFOiIsImRtZy10eXBlLXBsYWNlIjoiU2xhc2hpbmciLCJjcml0Oi11IjoiQ1JJVDoiLCJkYW1hZ2UyOi11IjoiREFNQUdFMjoiLCJzYXZpbmctdGhyb3c6LXUiOiJTQVZJTkcgVEhST1c6IiwidnMtZGM6LXUiOiJWUyBEQzoiLCJzcGVsbC11IjoiU1BFTEwiLCJmbGF0LXUiOiJGTEFUIiwic2F2ZSI6IlNhdmUiLCJzYXZlLWVmZmVjdDotdSI6IlNBVkUgRUZGRUNUOiIsInNhdmUtZWZmZWN0LXBsYWNlIjoiaGFsZiBkYW1hZ2UiLCJhbW11bml0aW9uOi11IjoiQU1NVU5JVElPTjoiLCJhbW11bml0aW9uLXBsYWNlIjoiQXJyb3dzIiwiZGVzY3JpcHRpb246LXUiOiJERVNDUklQVElPTjoiLCJkZXNjcmlwdGlvbi1wbGFjZSI6IlVwIHRvIDIgY3JlYXR1cmVzIHdpdGhpbiA1IGZlZXQiLCJhdGstc3BlbGxjYXN0aW5nLXUiOiJBVFRBQ0tTICZhbXA7IFNQRUxMQ0FTVElORyIsImNvcHBlci1waWVjZS11IjoiQ1AiLCJzaWx2ZXItcGllY2UtdSI6IlNQIiwiZWxlY3RydW0tcGllY2UtdSI6IkVQIiwiZ29sZC1waWVjZS11IjoiR1AiLCJwbGF0aW51bS1waWVjZS11IjoiUFAiLCJ3YXJuaW5nLWFybW9yLXNldHMtdSI6IjxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBuYW1lPVwiYXR0cl9hcm1vcndhcm5pbmdcIiB2YWx1ZT1cImhpZGVcIj5XQVJOSU5HIC0gTVVMVElQTEUgU0VUUyBPRiBBUk1PUiBPUiBTSElFTERTIEhBVkUgQkVFTiBBRERFRCBBTkQgQUMgSVMgTk9UIENPUlJFQ1RMWSBDQUxDVUxBVEVELiBVTkVRVUlQIFRIRSBBUk1PUiBQSUVDRSBGUk9NIFRIRSBJVEVNIERFVEFJTFMuIiwiaXRlbS1uYW1lLXUiOiJJVEVNIE5BTUUiLCJlcXVpcHBlZC11IjoiRVFVSVBQRUQiLCJ1c2UtYXMtcmVzb3VyY2UtdSI6IlVTRSBBUyBBIFJFU09VUkNFIiwicHJvcDotdSI6IlBST1A6IiwibW9kczotdSI6Ik1PRFM6IiwidG90YWwtd2VpZ2h0LXUiOiJUT1RBTCBXRUlHSFQiLCJpbW1vYmlsZS11IjoiSU1NT0JJTEUiLCJoZWF2aWx5LWVuY3VtYmVyZWQtdSI6IkhFQVZJTFkgRU5DVU1CRVJFRCIsImVuY3VtYmVyZWQtdSI6IkVOQ1VNQkVSRUQiLCJvdmVyLWNhcnJ5aW5nLWNhcC11IjoiT1ZFUiBDQVJSWUlORyBDQVBBQ0lUWSIsImVxdWlwbWVudC11IjoiRVFVSVBNRU5UIiwicGVyc29uYWxpdHktdHJhaXRzLXUiOiJQRVJTT05BTElUWSBUUkFJVFMiLCJpZGVhbHMtdSI6IklERUFMUyIsImJvbmRzLXUiOiJCT05EUyIsImZsYXdzLXUiOiJGTEFXUyIsImNsYXNzLXJlc291cmNlLXUiOiJDTEFTUyBSRVNPVVJDRSIsIm90aGVyLXJlc291cmNlLXUiOiJPVEhFUiBSRVNPVVJDRSIsImZlYXRzLXRyYWl0cy11IjoiRkVBVFVSRVMgJmFtcDsgVFJBSVRTIiwiYWdlLXUiOiJBR0UiLCJzaXplLXUiOiJTSVpFIiwiaGVpZ2h0LXUiOiJIRUlHSFQiLCJ3ZWlnaHQtdSI6IldFSUdIVCIsImV5ZS11IjoiRVlFUyIsInNraW4tdSI6IlNLSU4iLCJoYWlyLXUiOiJIQUlSIiwiY2hhci1hcHBlYXJhbmNlLXUiOiJDSEFSQUNURVIgQVBQRUFSQU5DRSIsImNoYXItYmFja3N0b3J5LXUiOiJDSEFSQUNURVIgQkFDS1NUT1JZIiwiYWxsaWVzLW9yZ3MtdSI6IkFMTElFUyAmYW1wOyBPUkdBTklaQVRJT05TIiwiYWRkLWZlYXRzLXRyYWl0cy11IjoiQURESVRJT05BTCBGRUFUVVJFUyAmYW1wOyBUUkFJVFMiLCJ0cmVhc3VyZS11IjoiVFJFQVNVUkUiLCJzcGVsbC1zYXZlLWRjLXUiOiJTUEVMTCBTQVZFIERDIiwiY2FudHJpcHMtdSI6IkNBTlRSSVBTIiwicml0dWFsLXUiOiJSSVRVQUwiLCJjYXN0aW5nLXRpbWU6LXUiOiJDQVNUSU5HIFRJTUU6IiwiY2FzdGluZy10aW1lOiI6IkNhc3RpbmcgVGltZToiLCJhdC1oaWdoZXItbHZsLWRtZzotdSI6IkhJR0hFUiBMVkwgQ0FTVCBETUc6IiwiaGFsZi1kbWctcGxhY2UiOiJIYWxmIGRhbWFnZSIsImhpdC1kaWU6LXUiOiJISVQgRElFOiIsImluaXRpYXRpdmUtbW9kOi11IjoiSU5JVElBVElWRSBNT0RJRklFUjoiLCJnbG9iLXNhdmluZy1tb2Q6LXUiOiJHTE9CQUwgU0FWSU5HIFRIUk9XIE1PRElGSUVSOiIsImdsb2ItYWMtbW9kOi11IjoiR0xPQkFMIEFSTU9SIENMQVNTIE1PRElGSUVSOiIsImdsb2ItYXRrLW1vZDotdSI6IkdMT0JBTCBNQUdJQyBBVFRBQ0sgTU9ESUZJRVI6IiwicGFzcy1wZXJjLW1vZDotdSI6IlBBU1NJVkUgUEVSQ0VQVElPTiBNT0RJRklFUjoiLCJkZWF0aC1zYXZlLW1vZDotdSI6IkRFQVRIIFNBVkUgTU9ESUZJRVI6IiwibWFnaWMtY2FzdGVyLWx2bDotdSI6Ik1BR0lDIENBU1RFUiBMRVZFTDoiLCJoYWxmbGluZy1sdWNrLXUiOiJIQUxGTElORyBMVUNLIiwiYXJjYW5lLWZpZ2h0ZXItdSI6IkFSQ0FORSBGSUdIVEVSIiwiYXJjYW5lLXJvZ3VlLXUiOiJBUkNBTkUgUk9HVUUiLCJjbGFzcy1vcHRpb25zLXUiOiJDTEFTUyBPUFRJT05TICg8aW5wdXQgdHlwZT1cInRleHRcIiBuYW1lPVwiYXR0cl9jbGFzc19sYWJlbFwiIHZhbHVlPVwiQHtjbGFzc31cIiBkaXNhYmxlZD1cInRydWVcIj4pIiwiMm5kLWNsYXNzOi11IjoiMk5EIENMQVNTOiIsImx2bDotdSI6IkxFVkVMOiIsIjNyZC1jbGFzczotdSI6IjNSRCBDTEFTUzoiLCI0dGgtY2xhc3M6LXUiOiI0VEggQ0xBU1M6IiwibXV0bGljbGFzcy1vcHRzLXUiOiJNVUxUSUNMQVNTIE9QVElPTlMiLCJ1c2UtY3VzdC1jbGFzcy11IjoiVVNFIENVU1RPTSBDTEFTUyIsImNsYXNzLW5hbWU6LXUiOiJDTEFTUyBOQU1FOiIsInNwZWxsY2FzdGluZy1hYmlsaXR5Oi11IjoiU1BFTExDQVNUSU5HIEFCSUxJVFk6Iiwic3BlbGwtc2xvdHM6LXUiOiJTUEVMTCBTTE9UUzoiLCJzcGVsbC1mdWxsLXUiOiJGVUxMIChDbGVyaWMsIERydWlkLCBXaXphcmQpIiwic3BlbGwtaGFsZi11IjoiSEFMRiAoUGFsYWRpbiwgUmFuZ2VyKSIsInNwZWxsLXRoaXJkLXUiOiJUSElSRCAoQXJjYW5lIEZpZ2h0ZXIvUm9ndWUpIiwiY3VzdC1jbGFzcy1vcHRzIjoiQ1VTVE9NIENMQVNTIE9QVElPTlMiLCJub3JtYWwiOiJOb3JtYWwiLCJleHBpcnRpc2UiOiJFeHBlcnRpc2UiLCJza2lsbC1vcHRzLXUiOiJTS0lMTCBPUFRJT05TIiwidmVyc2lvbiI6InYiLCJhbHdheXMtcm9sbC1hZHYiOiJBbHdheXMgUm9sbCBBZHZhbnRhZ2UiLCJ0b2dnbGUtcm9sbC1hZHYiOiJBZHZhbnRhZ2UgVG9nZ2xlIiwicXVlcnktcm9sbC1hZHYiOiJRdWVyeSBBZHZhbnRhZ2UiLCJuZXZlci1yb2xsLWFkdiI6Ik5ldmVyIFJvbGwgQWR2YW50YWdlIiwibmV2ZXItd2hpc3Blci1yb2xsIjoiTmV2ZXIgV2hpc3BlciBSb2xscyIsInF1ZXJ5LXdoaXNwZXItcm9sbCI6IlF1ZXJ5IFdoaXNwZXIiLCJhbHdheXMtd2hpc3Blci1yb2xsIjoiQWx3YXlzIFdoaXNwZXIgUm9sbHMiLCJuZXZlci1yb2xsLWRtZyI6IkRvbid0IEF1dG8gUm9sbCBEYW1hZ2UiLCJhbHdheXMtcm9sbC1kbWciOiJBdXRvIFJvbGwgRGFtYWdlICZhbXA7IENyaXQiLCJhZGQtY2hhci10by10ZW1wbGF0ZXM6LXUiOiJBREQgQ0hBUkFDVEVSIE5BTUUgVE8gVEVNUExBVEVTOiIsIm9uIjoiT24iLCJvZmYiOiJPZmYiLCJpbnZlbnRvcnk6LXUiOiJJTlZFTlRPUlk6IiwiY29tcGVuZGl1bS1jb21wYXRpYmxlIjoiQ29tcGVuZGl1bSBDb21wYXRpYmxlIiwic2ltcGxlIjoiU2ltcGxlIiwiZW5jdW1iZXJhbmNlOi11IjoiRU5DVU1CRVJBTkNFOiIsImFtbW8tdHJhY2tpbmc6LXUiOiJBTU1PIFRSQUNLSU5HOiIsImdlbmVyYWwtb3B0cy11IjoiR0VORVJBTCBPUFRJT05TIiwidHJhbnNpdGlvbi10ZXh0IjoiQ2xpY2tpbmcgb25lIG9mIHRoZSBpbWFnZXMgYmVsb3cgd2lsbCByZWZvcm1hdCB0aGUgZGF0YSBmcm9tIHlvdXIgY3VycmVudCBzaGVldCB0byB0aGlzIHNoZWV0LiBUaGVzZSBjaGFuZ2VzIGFyZSBwZXJtYW5lbnQgYW5kIGNhbm5vdCBiZSB1bmRvbmUuIiwidHJhbnNpdGlvbi10ZXh0LWhpZ2hsaWdodCI6IlBsZWFzZSBtYWtlIGEgY29weSBvZiB5b3VyIGdhbWUgYmVmb3JlIHlvdSB1c2UgdGhpcyB0b29sLiIsImNob29zZS1zaGVldC10cmFuc2ZlciI6IkNIT09TRSBUSEUgU0hFRVQgWU9VIEFSRSBUUkFOU0ZFUklORyBGUk9NIiwiY29tbXVuaXR5LXNoZWV0LXUiOiJDT01NVU5JVFkgU0hFRVQiLCJzaGFwZWQtc2hlZXQtdSI6IlNIQVBFRCBTSEVFVCIsInRyYW5zaXRpb24tb3B0cy11IjoiVFJBTlNJVElPTiBPUFRJT05TIiwicG9ydGlvbnMtc2hlZXQtdXRpbGl6ZSI6IlBvcnRpb25zIG9mIHRoaXMgc2hlZXQgdXRpbGl6ZSBjb250ZW50IGZyb20gdGhlIFN5c3RlbSBSZWZlcmVuY2UgRG9jdW1lbnQgNS4wIHVuZGVyIHRoZSBPR0wgTGljZW5zZS4gVmlldyBPR0wgTGljZW5zZSBhbmQgQ29weXJpZ2h0IE5vdGljZS4gaHR0cHM6Ly93aWtpLnJvbGwyMC5uZXQvU1JEXzUuMF9PR0xfTGljZW5zZSIsImFwaS1yZXF1aXJlZC10aXRsZSI6IlRyeSBpdCBub3cgd2l0aCBlYXN5IG9uZSBjbGljayBBUEkgaW5zdGFsbGF0aW9uIGF2YWlsYWJsZSB3aXRoIHlvdXIgUHJvIHN1YnNjcmlwdGlvbi4iLCJhcGktcmVxdWlyZWQtdSI6IihBUEkgUkVRVUlSRUQpIiwic3BlbGxfZGNfbW9kOi11IjoiU1BFTEwgU0FWRSBEQyBNT0Q6IiwiY3VzdG9tX2FjOi11IjoiQ1VTVE9NIEFDOiIsIm5wYy1pbmZvIjoiVGhlIE5QQyBvcHRpb24gc2V0cyBuZXcgY2hhcmFjdGVycyB0byBkZWZhdWx0IHRvIHRoZSBOUEMgY2FyZCBzdHlsZSBzaGVldC4gVXNlZnVsIGlmIHRoZSBwbGF5ZXIgY2hhcmFjdGVycyBoYXZlIGFscmVhZHkgYmVlbiBjcmVhdGVkIGFuZCBhbGwgbmV3IGNoYXJhY3RlciBzaGVldHMgYWRkZWQgdG8gdGhlIGdhbWUgd2lsbCBsaWtlbHkgcmVwcmVzZW50aW5nIG5vbmUgcGxheWVyIGNoYXJhY3RlcnMuIiwibnBjLXBjIjoiTlBDL1BDIiwicm9sbC1xdWVyaWVzLWluZm8iOiJEMjAgUm9sbHMgb3V0cHV0IGFjY29yZGluZyB0byB0aGlzIG9wdGlvbi4gQWx3YXlzIFJvbGwgQWR2YW50YWdlIGlzIHRoZSBkZWZhdWx0IHNldHRpbmcgYW5kIHdpbGwgcm9sbCB0d28gRDIwIG9uIGV2ZXJ5IHJvbGwgaW4gY2FzZSBvZiBhZHZhbnRhZ2UuIFRoZSBleHBlY3RhdGlvbiBpcyB0aGF0IGlmIHRoZXJlIGlzIG5vIGFkdmFudGFnZSBvciBkaXNhZHZhbnRhZ2UgeW91IHVzZSB0aGUgbGVmdCBtb3N0IHJlc3VsdC4gVGhlIEFkdmFudGFnZSBUb2dnbGUgb3B0aW9uIGFkZHMgdGhyZWUgbmV3IGJ1dHRvbnMgdG8gdGhlIHRvcCBvZiB0aGUgc2hlZXQgc28gdGhhdCB5b3UgY2FuIHRvZ2dsZSBhZHZhbnRhZ2Ugb24gYSBjYXNlIGJ5IGNhc2UgYmFzaXMuIFF1ZXJ5IEFkdmFudGFnZSBnaXZlcyB5b3UgYSBwcm9tcHQgZXZlcnkgcm9sbCBhc2tpbmcgaWYgdGhlIHJvbGwgaGFzIGFkdmFudGFnZS4gTmV2ZXIgUm9sbCBBZHZhbnRhZ2UgYWx3YXlzIHJvbGxzIGEgc2luZ2xlIEQyMCBvbiBhbnkgZ2l2ZW4gcm9sbCwgZXhwZWN0aW5nIHRoZSBwbGF5ZXIgdG8gcm9sbCBhIHNlY29uZCB0aW1lIGluIGNhc2Ugb2YgYWR2YW50YWdlIG9yIGRpc2FkdmFudGFnZS4iLCJ3aGlzcC1yb2xscy1nbS1pbmZvIjoiQWxsIHNoZWV0IHJvbGxzIGFyZSBzZW50IHRvIGFsbCBwbGF5ZXJzIGluIGNoYXQgYnkgZGVmYXVsdC4gUXVlcnkgV2hpc3BlciBvcHRpb24gZ2l2ZXMgeW91IGEgcHJvbXB0IHdpdGggZWFjaCByb2xsIG9mIHdoZXRoZXIgb3Igbm90IHRoZSByb2xsIHNob3VsZCBiZSBzZW50IHByaXZhdGVseSBvbmx5IHRvIHlvdXJzZWxmIGFuZCB0aGUgR00uIEFsd2F5cyBXaGlzcGVyIFJvbGxzIHdpbGwgc2VuZCBhbGwgcm9sbHMgb25seSB0byB5b3Vyc2VsZiBhbmQgdGhlIEdNLiIsImF1dG8tZG1nLXJvbGwtaW5mbyI6IkJ5IGRlZmF1bHQsIGF0dGFjayBkYW1hZ2Ugcm9sbHMgYXJlIG5vdCByb2xsZWQgdW50aWwgdGhlIGhpdCBpcyBjb25maXJtZWQuIERhbWFnZSBpcyByb2xsZWQgZnJvbSB0aGUgY2hhdCByb2xsIHRlbXBsYXRlIGJ5IGNsaWNraW5nIG9uIHRoZSBuYW1lIG9mIHRoZSBhdHRhY2sgaW4gdGhlIHJpZ2h0IGhhbmQgYmFyLCB3aGljaCB0aGVuIGRpc3BsYXlzIHRoZSBkYW1hZ2UuIFRoZSBkZWZhdWx0IG1ldGhvZCBpcyBjb21wYXRpYmxlIHdpdGggM0QgZGljZS4gT3B0aW9uYWxseSwgeW91IGNhbiBjaG9vc2UgdG8gaGF2ZSB0aGUgQXV0byBSb2xsIERhbWFnZSAmIENyaXQgb3B0aW9uIHdoaWNoIHdpbGwgcm9sbCBkYW1hZ2UgYW5kIGNyaXRpY2FsIGhpdCBkaWNlIGF0IHRoZSBzYW1lIHRpbWUgb2YgdGhlIGF0dGFjaywgcHJlc2VudGluZyBhbGwgcG9zc2libGUgb3V0Y29tZXMgYXQgdGhlIHRpbWUgb2YgdGhlIGF0dGFjay4iLCJhZGQtY2hhci10by10ZW1wbGF0ZXMtaW5mbyI6IkNoYXJhY3RlciBuYW1lcyBhcmUgbm90IGFkZGVkIHRvIHRoZSByb2xsIHRlbXBsYXRlIGJ5IGRlZmF1bHQsIGFuZCBhcmUgb25seSBkaXNwbGF5ZWQgYXMgbm9ybWFsIGluIHRoZSBjaGF0IHRhYiBhcyB0aGUgcGxheWVyL2NoYXJhY3RlciBzZWxlY3RlZCBhcyAnU3BlYWtpbmcgQXMnLiBUdXJuaW5nIHRoaXMgb3B0aW9uIG9uIGFkZHMgdGhlIGNoYXJhY3RlciBtYWtpbmcgdGhlIHJvbGwncyBuYW1lIHRvIHRoZSB0ZW1wbGF0ZSwgdXNlZnVsIGZvciBwbGF5ZXJzIHJlcHJlc3RpbmcgbXVsdGlwbGUgY2hhcmFjdGVycy4iLCJpbnZlbnRvcnktaW5mbyI6IkNoYXJhY3RlciBJbnZlbnRvcmllcyBkZWZhdWx0IHRvIHRoZSBjb21wbGV4IHN0eWxlIHRoYXQgaXMgY29tcGF0aWJsZSB3aXRoIHRoZSBSb2xsMjAgNUUgQ29tcGVuZGl1bS4gVGhpcyBpbmNsdWRlcyBncmFudWxhciBpdGVtIGFtb3VudHMvd2VpZ2h0cywgd2VpZ2h0IGFuZCBlbmN1bWJyYW5jZSB0cmFja2luZywgc29ydGluZywgQUMgY2FsY3VsYXRpb25zLCBhdXRvbWF0aWMgYXR0YWNrIGdlbmVyYXRpb24sIGFuZCBtb3JlLiBUaGUgU2ltcGxlIG9wdGlvbiBwcm92aWRlcyBhIHRleHQgZmllbGQgZm9yIGl0ZW0gbGlzdHMgZm9yIHBsYXllcnMgd2hvIHdhbnQgbW9yZSBtYW51YWwgY29udHJvbCBvdmVyIHRoZSBzaGVldC4iLCJlbmN1bWJlcmFuY2UtaW5mbyI6IlRoZSBzaGVldCB1c2VzIHRoZSB2YXJpYW50IGVuY3VtYnJhbmNlIHJ1bGVzIG9uIHBhZ2UgMTc2IG9mIHRoZSBQSEIuIFRoZSBPZmYgb3B0aW9uIGRpc2FibGVzIHRoZSB2YXJpYW50IHJ1bGVzIGFuZCBvbmx5IHVzZXMgYSBiYXNpYyBvdmVyLWxpbWl0IGludmVudG9yeSB3ZWlnaHQgY2hlY2suIiwiYW1tby10cmFja2luZy1pbmZvIjoiUHJvdmlkZXMgYXV0b21hdGljIGFtbW8gdHJhY2tpbmcgd2l0aCB0aGUgPGEgc3JjPSdodHRwczovL3dpa2kucm9sbDIwLm5ldC81dGhfRWRpdGlvbl9PR0xfYnlfUm9sbDIwI1V0aWxpemluZ190aGVfNXRoX0VkaXRpb25fT0dMX0NvbXBhbmlvbl9BUElfU2NyaXB0Jz41dGggRWRpdGlvbiBPR0wgYnkgUm9sbDIwIENvbXBhbmlvbiBBUEkgU2NyaXB0PC9hPi4iLCJkdW5nZW9ucy1hbmQtZHJhZ29ucy1zdHlsaW5nIjoiRFVOR0VPTlMgQU5EIERSQUdPTlMgU1RZTElORyIsImR1bmdlb25zLWFuZC1kcmFnb25zLXN0eWxpbmctaW5mbyI6IlR1cm5zIG9uIER1bmdlb25zIGFuZCBEcmFnb25zIHN0eWxpbmcgZm9yIGJvdGggdGhlIGNoYXJhY3RlciBzaGVldCBhbmQgcm9sbCB0ZW1wbGF0ZXMuIFRoaXMgc2V0dGluZyBpcyBhdXRvbWF0aWNhbGx5IGFwcGxpZWQgdG8gYWxsIGNoYXJhY3RlciBzaGVldHMgYW5kIGNhbm5vdCBiZSBzZWxlY3RpdmVseSB1c2VkLiJ9LCJsYW5nIjoiZW4ifQ==";
var customcharsheet_lang = "en";
